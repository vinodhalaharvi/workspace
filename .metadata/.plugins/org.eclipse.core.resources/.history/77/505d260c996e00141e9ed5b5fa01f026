package cscie97.asn3.squaredesk.authentication;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import cscie97.asn3.squaredesk.provider.AccessException;
import cscie97.asn3.squaredesk.provider.ContactInfo;
import cscie97.asn3.squaredesk.provider.Image;
import cscie97.asn3.squaredesk.provider.OfficeSpace;
import cscie97.asn3.squaredesk.provider.Provider;
import cscie97.asn3.squaredesk.provider.ProviderAlreadyExistException;
import cscie97.asn3.squaredesk.provider.ProviderNotFoundException;
import cscie97.asn3.squaredesk.provider.Rating;
import cscie97.asn3.squaredesk.provider.RatingNotFoundException;
import cscie97.asn3.squaredesk.renter.ProfileFactory;
import cscie97.asn3.squaredesk.renter.RenterAlreadyExistException;

public class AuthenticationService {

	public void createUser(){
		
	}
	
	public void addEntitlement(){
		
	}
	
	public void addEntitlementToRole(){
		
	}
	
	public void addRoleToUser(){
		
	}
	
	/**
	 * Gets the UUID from string.
	 *
	 * @param name the name
	 * @return the UUID from string
	 */
	protected static String getUUIDFromString(String name) {
		String uuidStr = UUID.nameUUIDFromBytes(name.getBytes()).toString(); 
		return uuidStr; 	
	}

	/**
	 * Creates the provider.
	 *
	 * @param authToken
	 *            the auth token
	 * @param name
	 *            the name
	 * @param contactInfo
	 *            the contact info
	 * @param picture
	 *            the picture
	 * @return the provider
	 * @throws ProviderAlreadyExistException
	 *             the provider already exist exception
	 * @throws AccessException
	 *             the access exception
	 * @throws RenterAlreadyExistException 
	 * @throws ProfileAlreadyExistsException 
	 */
	public static Provider createProvider(String authToken, String name, 
			ContactInfo contactInfo, Image picture
			) throws ProviderAlreadyExistException, AccessException{ 
		String uuidName = getUUIDFromString(name); 
		if (providers.containsKey(uuidName)){
			throw new ProviderAlreadyExistException("This Provider Already Exists");
		} else {
			Provider providerObj = (Provider) ProfileFactory.createProfile("provider", 
					name, contactInfo, picture, uuidName); 
			providers.put(uuidName, providerObj);
			return providerObj; 
		}
	}

	/**
	 * Gets the provider.
	 *
	 * @param authToken the auth token
	 * @param providerId the provider id
	 * @return the provider
	 * @throws ProviderNotFoundException the provider not found exception
	 * @throws AccessException the access exception
	 */
	public static Provider getProvider(String authToken, String providerId) 
			throws ProviderNotFoundException, AccessException {
		return getProvider(providerId); 
	}

	/**
	 * Delete provider.
	 *
	 * @param authToken the auth token
	 * @param providerId the provider id
	 * @throws ProviderNotFoundException the provider not found exception
	 * @throws AccessException the access exception
	 */
	public static void deleteProvider(String authToken, String providerId) 
			throws ProviderNotFoundException, AccessException{
		Provider provider = getProvider(providerId); 
		//first remove all office space mappings
		for(OfficeSpace officeSpace : provider.getOfficeSpaces()){
			officeSpaces.remove(officeSpace.getOffId());
		}
		providers.remove(providerId);
	}

	/**
	 * Update provider name.
	 *
	 * @param authToken the auth token
	 * @param providerId the provider id
	 * @param name the name
	 * @return the provider
	 * @throws ProviderNotFoundException the provider not found exception
	 * @throws AccessException the access exception
	 */
	public static Provider updateProviderName(String authToken, String providerId, String name) 
			throws ProviderNotFoundException, AccessException{
		Provider providerObj = getProvider(providerId);
		String providerOldName = providerObj.getName(); 
		providerObj.setName(name);
		String providerNewId = getUUIDFromString(name);
		providerObj.setProviderId(providerNewId);
		//remove the mapping with old name since the provider name got changed
		providers.remove(getUUIDFromString(providerOldName)); 
		//reinsert a new entry with new provider name
		providers.put(providerNewId, providerObj); 
		return providerObj;	
	}

	/**
	 * Adds the rating to provider.
	 *
	 * @param authToken the auth token
	 * @param providerId the provider id
	 * @param rating the rating
	 * @return the rating
	 * @throws ProviderNotFoundException the provider not found exception
	 */
	public static Rating addRatingToProvider(String authToken, String providerId, Rating rating)
			throws ProviderNotFoundException{
		Provider providerObj = getProvider(providerId); 
		providerObj.addRatingToList(rating); 
		return rating; 
	}

	/**
	 * Removes the rating from provider.
	 *
	 * @param authToken the auth token
	 * @param providerId the provider id
	 * @param ratingId the rating id
	 * @throws ProviderNotFoundException the provider not found exception
	 * @throws RatingNotFoundException the rating not found exception
	 */
	public static void removeRatingFromProvider(String authToken, String providerId, String ratingId) 
			throws ProviderNotFoundException, RatingNotFoundException{
		Provider providerObj = getProvider(providerId); 
		providerObj.removeRatingfromList(ratingId); 
	}

	/**
	 * Gets the rating list for provider.
	 *
	 * @param authToken the auth token
	 * @param providerId the provider id
	 * @return the rating list for provider
	 * @throws ProviderNotFoundException the provider not found exception
	 */
	public static Collection<Rating> getRatingListForProvider(String authToken, String providerId)
			throws ProviderNotFoundException{
		Provider providerObj = getProvider(providerId); 
		return providerObj.getRatings();
	}

	private static Map<String, Provider> users = new HashMap<String, User>();

	
}
