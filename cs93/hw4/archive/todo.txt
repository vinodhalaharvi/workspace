So we have so far split up the input line in to tokens. 
We don't care if the input line has right number of tokens.
We will just pass this to the right inst function and let it error out there. 
When the inst function is called it will use the various tokens from the input param and spit out the mif file line. If the right number of tokens are not found in the input then we will error out here.
These will be the helper functions that the individual inst function will need. 

getopcode()
getregisterbits()
convertToHex()
getimmvalue() //though this should come directly from the imm value and nothing needs to be changed

one example of how the inst function looks like is as shown below

char * add(tokens){
	inst = tokens[0]; 
	rdest = tokens[1]; 
	rsrc = tokens[2]; 
	rtrgt = tokens[2]; 
	return convertToHex(strcat(
		getopcode(inst), 
		getregisterbits(tokens[1]), 
		getregisterbits(tokens[2]), 
		getregisterbits(tokens[3]), 
		"00000", 
		tokens[4])); 
}


convertToHex(char * bits){
	//for each four pair generate a hex code
	//and return the output string
}
