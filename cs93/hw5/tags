!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
add	command.c	/^int add(int rs, int rt, int rd){$/;"	f
addi	command.c	/^int addi(int rs, int rt, int imm){$/;"	f
addiu	command.c	/^int addiu(int rs, int rt, int imm){$/;"	f
addu	command.c	/^int addu(int rs, int rt, int rd){$/;"	f
aluopcode	emulator.c	/^char *aluopcode[64] = {"na"};  $/;"	v
and	command.c	/^int and(int rs, int rt, int rd){$/;"	f
andi	command.c	/^int andi(int rs, int rt, int imm){$/;"	f
beq	command.c	/^int beq(int rs, int rt, int offset){$/;"	f
bgez	command.c	/^int bgez(int rs, int offset){$/;"	f
bgezal	command.c	/^int bgezal(int rs, int offset){$/;"	f
bgtz	command.c	/^int bgtz(int rs, int offset){$/;"	f
blez	command.c	/^int blez(int rs, int offset){$/;"	f
bltz	command.c	/^int bltz(int rs, int offset){$/;"	f
bltzal	command.c	/^int bltzal(int rs, int offset){$/;"	f
bne	command.c	/^int bne(int rs, int rt, int offset){$/;"	f
doinst	command.c	/^int doinst(char * inst){$/;"	f
getBits	emulator.c	/^char * getBits(int num, unsigned int SIZE) { $/;"	f
getFiles	emulator.c	/^void getFiles(int argc, const char * argv[], FILE **rfile){$/;"	f
hextoint	emulator.c	/^unsigned int hextoint(char * hex){$/;"	f
j	command.c	/^int j(int inst_idnex){$/;"	f
jal	command.c	/^int jal(int inst_idnex){$/;"	f
jalr	command.c	/^int jalr(int rs, int rd){$/;"	f
jr	command.c	/^int jr(int rs){$/;"	f
lb	command.c	/^int lb(int base , int rt, int offset){$/;"	f
lbu	command.c	/^int lbu(int base , int rt, int offset){$/;"	f
lh	command.c	/^int lh(int base , int rt, int offset){$/;"	f
lhu	command.c	/^int lhu(int base , int rt, int offset){$/;"	f
lui	command.c	/^int lui(int rt, int imm){$/;"	f
lw	command.c	/^int lw(int base , int rt, int offset){$/;"	f
lwl	command.c	/^int lwl(int base , int rt, int offset){$/;"	f
lwr	command.c	/^int lwr(int base , int rt, int offset){$/;"	f
main	emulator.c	/^int main(int argc, const char *argv[])$/;"	f
newstr	emulator.c	/^char * newstr(int len){$/;"	f
nor	command.c	/^int nor(int rs, int rt, int rd){$/;"	f
opcode	emulator.c	/^char *opcode[64] = {"na"}; $/;"	v
or	command.c	/^int or(int rs, int rt, int rd){$/;"	f
ori	command.c	/^int ori(int rs, int rt, int imm){$/;"	f
registers	emulator.c	/^int registers[32]; $/;"	v
sb	command.c	/^int sb(int base , int rt, int offset){$/;"	f
sh	command.c	/^int sh(int base , int rt, int offset){$/;"	f
sll	command.c	/^int sll(int rt, int rd, int sa){$/;"	f
sllv	command.c	/^int sllv(int rs, int rt, int rd){$/;"	f
slt	command.c	/^int slt(int rs, int rt, int rd){$/;"	f
slti	command.c	/^int slti(int rs, int rt, int imm){$/;"	f
sltiu	command.c	/^int sltiu(int rs, int rt, int imm){$/;"	f
sltu	command.c	/^int sltu(int rs, int rt, int rd){$/;"	f
sra	command.c	/^int sra(int rt, int rd, int sa){$/;"	f
srav	command.c	/^int srav(int rs, int rt, int rd){$/;"	f
srl	command.c	/^int srl(int rt, int rd, int sa){$/;"	f
srlv	command.c	/^int srlv(int rs, int rt, int rd){$/;"	f
sub	command.c	/^int sub(int rs, int rt, int rd){$/;"	f
subu	command.c	/^int subu(int rs, int rt, int rd){$/;"	f
sw	command.c	/^int sw(int base , int rt, int offset){$/;"	f
swl	command.c	/^int swl(int base , int rt, int offset){$/;"	f
swr	command.c	/^int swr(int base , int rt, int offset){$/;"	f
toint	emulator.c	/^unsigned int toint(char * bits){$/;"	f
xor	command.c	/^int xor(int rs, int rt, int rd){$/;"	f
xori	command.c	/^int xori(int rs, int rt, int imm){$/;"	f
